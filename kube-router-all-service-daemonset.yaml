apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-router-cfg
  namespace: kube-system
  labels:
    tier: node
    k8s-app: kube-router
data:
  cni-conf.json: |
    {
      "name":"kubernetes",
      "type":"bridge",
      "bridge":"kube-bridge",
      "isDefaultGateway":true,
      "ipam": {
        "type":"host-local"
      }
    }
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-app: kube-router
  name: kube-router
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: kube-router
  labels:
    k8s-app: kube-router
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-router
subjects:
- kind: ServiceAccount
  name: kube-router
  namespace: kube-system
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: kube-router
rules:
  - apiGroups: [""]
    resources:
      - pods
      - nodes
      - networkpolicies
      - namespaces
      - endpoints
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups: ["extensions"]
    resources:
      - networkpolicies
    verbs:
      - get
      - list
      - watch
  - apiGroups: ["networking.k8s.io"]
    resources:
      - networkpolicies
    verbs:
      - get
      - list
      - watch
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: kube-router
  namespace: kube-system
  labels:
    k8s-app: kube-router
spec:
  template:
    metadata:
      labels:
        k8s-app: kube-router
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
        pod.beta.kubernetes.io/init-containers: '[
            {
                "name": "install-cni",
                "image": "busybox",
                "command": [ "/bin/sh", "-c", "set -e -x; if [ ! -f /etc/cni/net.d/10-kuberouter.conf ]; then TMP=/etc/cni/net.d/.tmp-kuberouter-cfg; cp /etc/kube-router/cni-conf.json ${TMP}; mv ${TMP} /etc/cni/net.d/10-kuberouter.conf; fi" ],
                "volumeMounts": [
                    {
                        "name": "cni",
                        "mountPath": "/etc/cni/net.d"
                    },
                    {
                        "name": "kube-router-cfg",
                        "mountPath": "/etc/kube-router"
                    }
                ],
                "volumes": {
                     "name": "cni",
                     "hostPath": {
                          "path": "/etc/cni/net.d"
                     }
                }
            }
        ]'
    spec:
      # imagePullSecrets:
      #   - name: gcr-json-key
      containers:
      - name: kube-router
        # image: us.gcr.io/prp-k8s/kube-router-git:latest
        image: cloudnativelabs/kube-router
        args: ["--run-router=true", "--run-firewall=true", "--run-service-proxy=true", "--advertise-cluster-ip=true", "--cluster-cidr=10.244.0.0/16"]
        securityContext:
          privileged: true
        imagePullPolicy: Always
        env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
        volumeMounts:
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
          - name: cni
            mountPath: /etc/cni/net.d
      hostNetwork: true
      serviceAccountName: kube-router
      tolerations:
      - key: CriticalAddonsOnly
        operator: Exists
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
        operator: Exists
      volumes:
        - name: lib-modules
          hostPath:
              path: /lib/modules
        - name: cni
          hostPath:
            path: /etc/cni/net.d
        - name: kube-router-cfg
          configMap:
            name: kube-router-cfg
